<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
  <head>
    <title>Character/Glyph Index Mapping</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="STYLESHEET" href="otspec.css" type="text/css">
  </head>
  <body>
    <div class="toprule">
    </div>
    <p class="menu">
      <a href="http://www.microsoft.com/typography/default.mspx">Microsoft Typography</a> | <a href="http://www.microsoft.com/typography/creators.htm">Developer...</a> | <a href="default.htm">OpenType specification</a> | <a href="otff.htm#otttables">OpenType tables</a> | The cmap table</p>
    <div class="middlerule">
    </div>
    <div class="contents">
      <h1>cmap - Character To Glyph Index Mapping Table</h1>
      <p>This table defines the mapping of character codes to the glyph index values used in the font. It may contain more than one subtable, in order to support more than one character encoding scheme. Character codes that do not correspond to any glyph in the font should be mapped to glyph index 0. The glyph at this location must be a special glyph representing a missing character, commonly known as .notdef.</p>
      <p>The table header indicates the character encodings for which subtables are present. Each subtable is in one of seven possible formats and begins with a format code indicating the format used.</p>
      <p>The platform ID and platform-specific encoding ID in the header entry (and, in the case of the Macintosh platform, the language field in the subtable itself) are used to specify a particular 'cmap' encoding. The header entries must be sorted first by platform ID, then by platform-specific encoding ID, and then by the language field in the corresponding subtable. Each platform ID, platform-specific encoding ID, and subtable language combination may appear only once in the 'cmap' table.</p>
      <p>When building a Unicode font for Windows, the platform ID should be 3 and the encoding ID should be 1. When building a symbol font for Windows, the platform ID should be 3 and the encoding ID should be 0. When building a font that will be used on the Macintosh, the platform ID should be 1 and the encoding ID should be 0.</p>
      <p>All Microsoft Unicode BMP encodings (Platform ID = 3, Encoding ID = 1) must provide at least a Format 4 'cmap' subtable. If the font is meant to support supplementary (non-BMP) Unicode characters, it will additionally need a Format 12 subtable with a platform encoding ID 10. The contents of the Format 12 subtable need to be a superset of the contents of the Format 4 subtable. Microsoft <b>strongly</b> recommends using a BMP Unicode 'cmap' for all fonts. However, some other encodings that appear in current fonts follow:</p>
      <table class="gray">
        <caption>Windows Encodings</caption>
        <tr>
          <th style="width: 33%;">Platform ID</th>
          <th style="width: 33%;">Encoding ID</th>
          <th style="width: 33%;">Description</th>
        </tr>
        <tr>
          <td>3</td>
          <td>0</td>
          <td>Symbol</td>
        </tr>
        <tr>
          <td>3</td>
          <td>1</td>
          <td>Unicode BMP (UCS-2)</td>
        </tr>
        <tr>
          <td>3</td>
          <td>2</td>
          <td>ShiftJIS</td>
        </tr>
        <tr>
          <td>3</td>
          <td>3</td>
          <td>PRC</td>
        </tr>
        <tr>
          <td>3</td>
          <td>4</td>
          <td>Big5</td>
        </tr>
        <tr>
          <td>3</td>
          <td>5</td>
          <td>Wansung</td>
        </tr>
        <tr>
          <td>3</td>
          <td>6</td>
          <td>Johab</td>
        </tr>
        <tr>
          <td>3</td>
          <td>7</td>
          <td>Reserved</td>
        </tr>
        <tr>
          <td>3</td>
          <td>8</td>
          <td>Reserved</td>
        </tr>
        <tr>
          <td>3</td>
          <td>9</td>
          <td>Reserved</td>
        </tr>
        <tr>
          <td>3</td>
          <td>10</td>
          <td>Unicode UCS-4</td>
        </tr>
      </table>
      <p>Unicode Variation Sequences supported by the font may be specified in the cmap table only under platform ID 0 and encoding ID 5, using a format 14 cmap subtable.</p>
      <p>The Character To Glyph Index Mapping Table is organized as follows:</p>
      <table class="gray">
        <caption>cmap Header</caption>
        <tr>
          <th style="width: 25%;">Type</th>
          <th style="width: 25%;">Name</th>
          <th style="width: 66%;">Description</th>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>version</td>
          <td>Table version number (0).</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>numTables</td>
          <td>Number of encoding tables that follow.</td>
        </tr>
      </table>
      <p>The cmap table header is followed by an array of encoding records that specify the particular encoding and the offset to the subtable for that encoding. The number of encoding records is <i>numTables</i>. An encoding record entry looks like:</p>
      <table class="gray">
        <caption>Encoding Record</caption>
        <tr>
          <th style="width: 25%;">Type</th>
          <th style="width: 25%;">Name</th>
          <th style="width: 50%;">Description</th>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>platformID</td>
          <td>Platform ID.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>encodingID</td>
          <td>Platform-specific encoding ID.</td>
        </tr>
        <tr>
          <td>ULONG</td>
          <td>offset</td>
          <td>Byte offset from beginning of table to the subtable for this encoding.</td>
        </tr>
      </table>
      <p>'name' table description.</p>
      <h2>
        <a name="cust" id="cust">OTF Windows NT compatibility mapping: </a>
      </h2>
      <p>If a platform ID 4 (custom), encoding ID 0-255 (OTF Windows NT compatibility mapping) 'cmap' encoding is present in an OpenType font with CFF outlines, then the OTF font driver in Windows NT will: (a) superimpose the glyphs encoded at character codes 0-255 in the encoding on the corresponding Windows ANSI (code page 1252) Unicode values in the Unicode encoding it reports to the system; (b) add Windows ANSI (CharSet 0) to the list of CharSets supported by the font; and (c) consider the value of the encoding ID to be a Windows CharSet value and add it to the list of CharSets supported by the font. Note: The 'cmap' subtable must use Format 0 or 6 for its subtable, and the encoding must be identical to the CFF's encoding.</p>
      <p>This 'cmap' encoding is not required. It provides a compatibility mechanism for non-Unicode applications that use the font as if it were Windows ANSI encoded. Non-Windows ANSI Type 1 fonts, such as Cyrillic and Central European fonts, that Adobe shipped in the past had &ldquo;0&rdquo; (Windows ANSI) recorded in the CharSet field of the .PFM file; ATM for Windows 9x ignores the CharSet altogether. Adobe provides this compatibility 'cmap' encoding in every OTF converted from a Type1 font in which the Encoding is not StandardEncoding.</p>
      <h2>Note on the language field in 'cmap' subtables:</h2>
      <p>This field must be set to zero for all cmap subtables whose platform IDs are other than Macintosh (platform ID 1). For cmap subtables whose platform IDs are Macintosh, set this field to the Macintosh language ID of the cmap subtable plus one, or to zero if the cmap subtable is not language-specific. For example, a Mac OS Turkish cmap subtable must set this field to 18, since the Macintosh language ID for Turkish is 17. A Mac OS Roman cmap subtable must set this field to 0, since Mac OS Roman is not a language-specific encoding.</p>
      <h2>Format 0: Byte encoding table</h2>
      <p>This is the Apple standard character to glyph index mapping table.</p>
      <table class="gray">
        <tr>
          <th style="width: 33%;">Type</th>
          <th style="width: 33%;">Name</th>
          <th style="width: 33%;">Description</th>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>format</td>
          <td>Format number is set to 0.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>length</td>
          <td>This is the length in bytes of the subtable.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>language</td>
          <td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td>
        </tr>
        <tr>
          <td>BYTE</td>
          <td>glyphIdArray[256]</td>
          <td>An array that maps character codes to glyph index values.</td>
        </tr>
      </table>
      <p>This is a simple 1 to 1 mapping of character codes to glyph indices. The glyph set is limited to 256. Note that if this format is used to index into a larger glyph set, only the first 256 glyphs will be accessible.</p>
      <h2>Format 2: High-byte mapping through table</h2>
      <p>This subtable is useful for the national character code standards used for Japanese, Chinese, and Korean characters. These code standards use a mixed 8/16-bit encoding, in which certain byte values signal the first byte of a 2-byte character (but these values are also legal as the second byte of a 2-byte character).</p>
      <p>In addition, even for the 2-byte characters, the mapping of character codes to glyph index values depends heavily on the first byte. Consequently, the table begins with an array that maps the first byte to a 4-word subHeader. For 2-byte character codes, the subHeader is used to map the second byte's value through a subArray, as described below. When processing mixed 8/16-bit text, subHeader 0 is special: it is used for single-byte character codes. When subHeader zero is used, a second byte is not needed; the single byte value is mapped through the subArray.</p>
      <table class="gray">
        <tr>
          <th style="width: 25%;">Type</th>
          <th style="width: 25%;">Name</th>
          <th style="width: 50%;">Description</th>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>format</td>
          <td>Format number is set to 2.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>length</td>
          <td>This is the length in bytes of the subtable.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>language</td>
          <td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>subHeaderKeys[256]</td>
          <td>Array that maps high bytes to subHeaders: value is subHeader index * 8.</td>
        </tr>
        <tr>
          <td>4 words struct</td>
          <td>subHeaders[ ]</td>
          <td>Variable-length array of subHeader structures.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>glyphIndexArray[ ]</td>
          <td>Variable-length array containing subarrays used for mapping the low byte of 2-byte characters.</td>
        </tr>
      </table>
      <p>A subHeader is structured as follows:</p>
      <table class="gray">
        <tr>
          <th style="width: 25%;">Type</th>
          <th style="width: 25%;">Name</th>
          <th style="width: 50%;">Description</th>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>firstCode</td>
          <td>First valid low byte for this subHeader.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>entryCount</td>
          <td>Number of valid low bytes for this subHeader.</td>
        </tr>
        <tr>
          <td>SHORT</td>
          <td>idDelta</td>
          <td>See text below.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>idRangeOffset</td>
          <td>See text below.</td>
        </tr>
      </table>
      <p>The firstCode and entryCount values specify a subrange that begins at firstCode and has a length equal to the value of entryCount. This subrange stays within the 0-255 range of the byte being mapped. Bytes outside of this subrange are mapped to glyph index 0 (missing glyph).The offset of the byte within this subrange is then used as index into a corresponding subarray of glyphIndexArray. This subarray is also of length entryCount. The value of the idRangeOffset is the number of bytes past the actual location of the idRangeOffset word where the glyphIndexArray element corresponding to firstCode appears.</p>
      <p>Finally, if the value obtained from the subarray is not 0 (which indicates the missing glyph), you should add idDelta to it in order to get the glyphIndex. The value idDelta permits the same subarray to be used for several different subheaders. The idDelta arithmetic is modulo 65536.</p>
      <h2>Format 4: Segment mapping to delta values</h2>
      <p>This is the Microsoft standard character to glyph index mapping table for fonts that support Unicode ranges other than the range [U+D800 - U+DFFF] (defined as Surrogates Area, in Unicode v 3.0) which is used for UCS-4 characters. If a font supports this character range (i.e. in turn supports the UCS-4 characters) a subtable in this format with a platform specific encoding ID 1 is yet needed, in addition to a subtable in format 12 with a platform specific encoding ID 10. Please see details on format 12 below, for fonts that support UCS-4 characters on Windows.</p>
      <p>This format is used when the character codes for the characters represented by a font fall into several contiguous ranges, possibly with holes in some or all of the ranges (that is, some of the codes in a range may not have a representation in the font). The format-dependent data is divided into three parts, which must occur in the following order:</p>
      <ol>
        <li>A four-word header gives parameters for an optimized search of the segment list;</li>
        <li>Four parallel arrays describe the segments (one segment for each contiguous range of codes);</li>
        <li>A variable-length array of glyph IDs (unsigned words).</li>
      </ol>
      <table class="gray">
        <tr>
          <th style="width: 20%;">Type</th>
          <th style="width: 30%;">Name</th>
          <th style="width: 50%;">Description</th>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>format</td>
          <td>Format number is set to 4.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>length</td>
          <td>This is the length in bytes of the subtable.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>language</td>
          <td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>segCountX2</td>
          <td>2 x segCount.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>searchRange</td>
          <td>2 x (2**floor(log2(segCount)))</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>entrySelector</td>
          <td>log2(searchRange/2)</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>rangeShift</td>
          <td>2 x segCount - searchRange</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>endCount[segCount]</td>
          <td>End characterCode for each segment, last=0xFFFF.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>reservedPad</td>
          <td>Set to 0.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>startCount[segCount]</td>
          <td>Start character code for each segment.</td>
        </tr>
        <tr>
          <td>SHORT</td>
          <td>idDelta[segCount]</td>
          <td>Delta for all character codes in segment.</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>idRangeOffset[segCount]</td>
          <td>Offsets into glyphIdArray or 0</td>
        </tr>
        <tr>
          <td>USHORT</td>
          <td>glyphIdArray[ ]</td>
          <td>Glyph index array (arbitrary length)</td>
        </tr>
      </table>
      <p>The number of segments is specified by segCount, which is not explicitly in the header; however, all of the header parameters are derived from it. The searchRange value is twice the largest power of 2 that is less than or equal to segCount. For example, if segCount=39, we have the following:</p>
      <table>
        <tr>
          <td>segCountX2</td>
          <td>78</td>
        </tr>
        <tr>
          <td>searchRange</td>
          <td>64</td>
          <td>(2 * largest power of 2 &lt;=39)</td>
        </tr>
        <tr>
          <td>entrySelector</td>
          <td>5</td>
          <td>log<sub>2</sub> (32)</td>
        </tr>
        <tr>
          <td>rangeShift</td>
          <td>14</td>
          <td>2 x 39 - 64</td>
        </tr>
      </table>
      <p>Each segment is described by a startCode and endCode, along with an idDelta and an idRangeOffset, which are used for mapping the character codes in the segment. The segments are sorted in order of increasing endCode values, and the segment values are specified in four parallel arrays. You search for the first endCode that is greater than or equal to the character code you want to map. If the corresponding startCode is less than or equal to the character code, then you use the corresponding idDelta and idRangeOffset to map the character code to a glyph index (otherwise, the missingGlyph is returned). For the search to terminate, the final endCode value must be 0xFFFF. This segment need not contain any valid mappings. (It can just map the single character code 0xFFFF to missingGlyph). However, the segment must be present.</p>
      <p>If the idRangeOffset value for the segment is not 0, the mapping of character codes relies on glyphIdArray. The character code offset from startCode is added to the idRangeOffset value. This sum is used as an offset from the current location within idRangeOffset itself to index out the correct glyphIdArray value. This obscure indexing trick works because glyphIdArray immediately follows idRangeOffset in the font file. The C expression that yields the glyph index is:</p>
      <pre>*(idRangeOffset[i]/2 
+ (c - startCount[i]) 
+ &amp;idRangeOffset[i])
</pre>
      <p>The value <i>c</i> is the character code in question, and <i>i</i> is the segment index in which <i>c</i> appears. If the value obtained from the indexing operation is not 0 (which indicates missingGlyph), idDelta[i] is added to it to get the glyph index. The idDelta arithmetic is modulo 65536.</p>
      <p>If the idRangeOffset is 0, the idDelta value is added directly to the character code offset (i.e. <tt>idDelta[i] + c</tt>) to get the corresponding glyph index. Again, the idDelta arithmetic is modulo 65536.</p>
      <p>As an example, the variant part of the table to map characters 10-20, 30-90, and 153-480 onto a contiguous range of glyph indices may look like this:</p>
      <table>
        <tr>
          <td>segCountX2:</td>
          <td>8</td>
        </tr>
        <tr>
          <td>searchRange:</td>
          <td>8</td>
        </tr>
        <tr>
          <td>entrySelector:</td>
          <td>4</td>
        </tr>
        <tr>
          <td>rangeShift:</td>
          <td>0</td>
        </tr>
        <tr>
          <td>endCode:</td>
          <td>20</td>
          <td>90</td>
          <td>480</td>
          <td>0Xffff</td>
        </tr>
        <tr>
          <td>reservedPad:</td>
          <td>0</td>
        </tr>
        <tr>
          <td>startCode:</td>
          <td>10</td>
          <td>30</td>
          <td>153</td>
          <td>0Xffff</td>
        </tr>
        <tr>
          <td>idDelta:</td>
          <td>-9</td>
          <td>-18</td>
          <td>-27</td>
          <td>1</td>
        </tr>
        <tr>
          <td>idRangeOffset:</td>
          <td>0</td>
          <td>0</td>
          <td>0</td>
          <td>0</td>
        </tr>
      </table>&nbsp;<p>This table performs the following mappings:</p><pre>10 &rArr; 10 - 9 = 1 
20 &rArr; 20 - 9 = 11
30 &rArr; 30 - 18 = 12
90 &rArr; 90 - 18 = 72
...and so on.
</pre><p>Note that the delta values could be reworked so as to reorder the segments.</p><h2>Format 6: Trimmed table mapping</h2><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>USHORT</td><td>format</td><td>Format number is set to 6.</td></tr><tr><td>USHORT</td><td>length</td><td>This is the length in bytes of the subtable.</td></tr><tr><td>USHORT</td><td>language</td><td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td></tr><tr><td>USHORT</td><td>firstCode</td><td>First character code of subrange.</td></tr><tr><td>USHORT</td><td>entryCount</td><td>Number of character codes in subrange.</td></tr><tr><td>USHORT</td><td>glyphIdArray [entryCount]</td><td>Array of glyph index values for character codes in the range.</td></tr></table><p>The firstCode and entryCount values specify a subrange (beginning at firstCode,length = entryCount) within the range of possible character codes. Codes outside of this subrange are mapped to glyph index 0. The offset of the code (from the first code) within this subrange is used as index to the glyphIdArray, which provides the glyph index value.</p><h1>Supporting 4-byte character codes</h1><p>While the four existing 'cmap' subtable formats which currently exist have served us well, the introduction of the Surrogates Area in Unicode 2.0 has stressed them past the point of utility. This section specifies three formats, format 8, 10 and 12; which directly support 4-byte character codes. A major change introduced with these three formats is a more pure 32-bit orientation. The 'cmap' table version number will continue to be 0x0000, for those fonts that make use of these formats.</p><h2>Format 8: mixed 16-bit and 32-bit coverage</h2><p>Format 8 is a bit like format 2, in that it provides for mixed-length character codes. If a font contains characters from the Unicode Surrogates Area (U+D800-U+DFFF), which are UCS-4 characters; it's likely that it will also include other, regular 16-bit Unicodes as well. We therefore need a format to map a mixture of 16-bit and 32-bit character codes, just as format 2 allows a mixture of 8-bit and 16-bit codes. A simplifying assumption is made: namely, that there are no 32-bit character codes which share the same first 16 bits as any 16-bit character code. This means that the determination as to whether a particular 16-bit value is a standalone character code or the start of a 32-bit character code can be made by looking at the 16-bit value directly, with no further information required.</p><p>Here's the format 8 subtable format:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>USHORT</td><td>format</td><td>Subtable format; set to 8.</td></tr><tr><td>USHORT</td><td>reserved</td><td>Reserved; set to 0</td></tr><tr><td>ULONG</td><td>length</td><td>Byte length of this subtable (including the header)</td></tr><tr><td>ULONG</td><td>language</td><td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td></tr><tr><td> BYTE</td><td>is32[8192]<br></td><td> Tightly packed array of bits (8K bytes total) indicating whether the particular 16-bit (index) value is the start of a 32-bit character code</td></tr><tr><td> ULONG</td><td> nGroups</td><td> Number of groupings which follow</td></tr></table><p>Here follow the individual groups. Each group has the following format:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> ULONG</td><td> startCharCode</td><td> First character code in this group; note that if this group is for one or more 16-bit character codes (which is determined from the is32 array), this 32-bit value will have the high 16-bits set to zero</td></tr><tr><td> ULONG</td><td> endCharCode</td><td> Last character code in this group; same condition as listed above for the startCharCode</td></tr><tr><td> ULONG</td><td> startGlyphID</td><td> Glyph index corresponding to the starting character code</td></tr></table><p>A few notes here. The endCharCode is used, rather than a count, because comparisons for group matching are usually done on an existing character code, and having the endCharCode be there explicitly saves the necessity of an addition per group. Groups must be sorted by increasing startCharCode. A group's endCharCode must be less than the startCharCode of the following group, if any.</p><p>To determine if a particular word (cp) is the first half of 32-bit code points, one can use an expression such as ( is32[ cp / 8 ] &amp; ( 1 &lt;&lt; ( 7 - ( cp % 8 ) ) ) ). If this is non-zero, then the word is the first half of a 32-bit code point.</p><p>0 is not a special value for the high word of a 32-bit code point. A font may not have both a glyph for the code point 0x0000 and glyphs for code points with a high word of 0x0000.</p><p>The presence of the packed array of bits indicating whether a particular 16-bit value is the start of a 32-bit character code is useful even when the font contains no glyphs for a particular 16-bit start value. This is because the system software often needs to know how many bytes ahead the next character begins, even if the current character maps to the missing glyph. By including this information explicitly in this table, no &ldquo;secret&rdquo; knowledge needs to be encoded into the OS.</p><p>Although this format might work advantageously on some platforms for non-Unicode encodings, Microsoft does not support it for Unicode encoded UCS-4 characters.</p><h2>Format 10: Trimmed array</h2><p>Format 10 is a bit like format 6, in that it defines a trimmed array for a tight range of 32-bit character codes:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>USHORT</td><td>format</td><td>Subtable format; set to 10.</td></tr><tr><td>USHORT</td><td>reserved</td><td>Reserved; set to 0</td></tr><tr><td> ULONG</td><td> length</td><td> Byte length of this subtable (including the header)</td></tr><tr><td>ULONG</td><td>language</td><td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td></tr><tr><td> ULONG</td><td> startCharCode</td><td> First character code covered</td></tr><tr><td> ULONG</td><td> numChars</td><td> Number of character codes covered</td></tr><tr><td> USHORT</td><td> glyphs[]</td><td> Array of glyph indices for the character codes covered</td></tr></table><p>This format is not supported by Microsoft.</p><h2>Format 12: Segmented coverage</h2><p>This is the Microsoft standard character to glyph index mapping table for fonts supporting the UCS-4 characters in the Unicode Surrogates Area (U+D800 - U+DFFF). It is a bit like format 4, in that it defines segments for sparse representation in 4-byte character space. Here's the subtable format:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>USHORT</td><td>format</td><td>Subtable format; set to 12.</td></tr><tr><td>USHORT</td><td>reserved</td><td>Reserved; set to 0</td></tr><tr><td> ULONG</td><td> length</td><td> Byte length of this subtable (including the header)</td></tr><tr><td>ULONG</td><td>language</td><td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td></tr><tr><td> ULONG</td><td> nGroups</td><td> Number of groupings which follow</td></tr></table><p>Fonts providing Unicode encoded UCS-4 character support for Windows 2000 and later, need to have a subtable with platform ID 3, platform specific encoding ID 1 in format 4; and in addition, need to have a subtable for platform ID 3, platform specific encoding ID 10 in format 12. Please note, that the content of format 12 subtable, needs to be a super set of the content in the format 4 subtable. The format 4 subtable needs to be in the cmap table to enable backward compatibility needs.</p><p>Here follow the individual groups, each of which has the following format:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> ULONG</td><td> startCharCode</td><td> First character code in this group</td></tr><tr><td> ULONG</td><td> endCharCode</td><td> Last character code in this group</td></tr><tr><td> ULONG</td><td> startGlyphID</td><td> Glyph index corresponding to the starting character code</td></tr></table><p>Groups must be sorted by increasing startCharCode. A group's endCharCode must be less than the startCharCode of the following group, if any. The endCharCode is used, rather than a count, because comparisons for group matching are usually done on an existing character code, and having the endCharCode be there explicitly saves the necessity of an addition per group.</p><h2>Format 13: Last Resort Font</h2><p>This subtable deals with situations where the same glyph is used for dozens or even tens of thousands of consecutive characters, from one end of Unicode to the other. This is common when creating a &ldquo;Last Resort&rdquo; font. Here's the subtable format:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>USHORT</td><td>format</td><td>Subtable format; set to 13.</td></tr><tr><td>USHORT</td><td>reserved</td><td>Reserved; set to 0</td></tr><tr><td> ULONG</td><td> length</td><td> Byte length of this subtable (including the header)</td></tr><tr><td>ULONG</td><td>language</td><td>Please see &ldquo;<a href="#language">Note on the language field in 'cmap' subtables</a>&ldquo; in this document.</td></tr><tr><td> ULONG</td><td> nGroups</td><td> Number of groupings which follow</td></tr></table><p>Here follow the individual groups, each of which has the following format:</p><table class="gray"><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> ULONG</td><td> startCharCode</td><td> First character code in this group</td></tr><tr><td> ULONG</td><td> endCharCode</td><td> Last character code in this group</td></tr><tr><td> ULONG</td><td> glyphID</td><td>Glyph index to be used for all the characters in the group's range.</td></tr></table><h2>Format 14: Unicode Variation Sequences</h2><p>Subtable format 14 specifies the Unicode Variation Sequences (UVSes) supported by the font. A Variation Sequence, according to the Unicode Standard, comprises a base character followed by a variation selector; e.g. &lt;U+82A6, U+E0101&gt;.</p><p>The subtable partitions the UVSes supported by the font into two categories: &ldquo;default&rdquo; and &ldquo;non-default&rdquo; UVSes. Given a UVS, if the glyph obtained by looking up the base character of that sequence in the Unicode cmap subtable (i.e. the UCS-4 or the BMP cmap subtable) is the glyph to use for that sequence, then the sequence is a &ldquo;default&rdquo; UVS; otherwise it is a &ldquo;non-default&rdquo; UVS, and the glyph to use for that sequence is specified in the format 14 subtable itself.</p><p>The example at the bottom of the page shows how a font vendor can use format 14 for a JIS-2004–aware font.</p><table class="gray"><caption>Format 14 header</caption><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>USHORT</td><td>format</td><td>Subtable format. Set to 14.</td></tr><tr><td>ULONG</td><td>length</td><td>Byte length of this subtable (including this header)</td></tr><tr><td>ULONG</td><td>numVarSelectorRecords</td><td>Number of variation Selector Records</td></tr></table><p>This is immediately followed by &lsquo;numVarSelectorRecords&rsquo; Variation Selector Records.</p><table class="gray"><caption>Variation Selector Record</caption><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> UINT24</td><td> varSelector</td><td>Variation selector</td></tr><tr><td>ULONG</td><td>defaultUVSOffset</td><td>Offset to Default UVS Table. May be 0.</td></tr><tr><td>ULONG</td><td>nonDefaultUVSOffset</td><td>Offset to Non-Default UVS Table. May be 0.</td></tr></table><p>The Variation Selector Records are sorted in increasing order of &lsquo;varSelector&rsquo;. No two records may have the same &lsquo;varSelector&rsquo;. All offsets in a record are relative to the beginning of the format 14 cmap subtable.</p><p>A Variation Selector Record and the data its offsets point to specify those UVSes supported by the font for which the variation selector is the &lsquo;varSelector&rsquo; value of the record. The base characters of the UVSes are stored in the tables pointed to by the offsets. The UVSes are partitioned by whether they are default or non-default UVSes.</p><p>Glyph IDs to be used for non-default UVSes are specified in the Non-Default UVS table.</p><h2>Default UVS Table</h2><p>A Default UVS Table is simply a range-compressed list of Unicode scalar values, representing the base characters of the default UVSes which use the &lsquo;varSelector&rsquo; of the associated Variation Selector Record.</p><table class="gray"><caption>Default UVS Table header</caption><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td>ULONG</td><td>numUnicodeValueRanges</td><td>Number of ranges that follow</td></tr></table><p>This is immediately followed by &lsquo;numUnicodeValueRanges&rsquo; Unicode Value Ranges, each of which represents a contiguous range of Unicode values.</p><table class="gray"><caption>Unicode Value Range</caption><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> UINT24</td><td> startUnicodeValue</td><td> First value in this range</td></tr><tr><td> BYTE</td><td> additionalCount</td><td> Number of additional values in this range</td></tr></table><p>For example, the range U+4E4D–U+4E4F (3 values) will set &lsquo;startUnicodeValue&rsquo; to 0x004E4D and &lsquo;additionalCount&rsquo; to 2. A singleton range will set &lsquo;additionalCount&rsquo; to 0.</p><p>(&lsquo;startUnicodeValue&rsquo; + &lsquo;additionalCount&rsquo;) must not exceed 0xFFFFFF.</p><p>The Unicode Value Ranges are sorted in increasing order of &lsquo;startUnicodeValue&rsquo;. The ranges must not overlap; i.e., (&lsquo;startUnicodeValue&rsquo; + &lsquo;additionalCount&rsquo;) must be less than the &lsquo;startUnicodeValue&rsquo; of the following range (if any).</p><h2>Non-Default UVS Table</h2><p>A Non-Default UVS Table is a list of pairs of Unicode scalar values and glyph IDs. The Unicode values represent the base characters of all non-default UVSes which use the &lsquo;varSelector&rsquo; of the associated Variation Selector Record, and the glyph IDs specify the glyph IDs to use for the UVSes.</p><table class="gray"><caption>Non-Default UVS Table header</caption><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> ULONG</td><td> numUVSMappings</td><td> Number of UVS Mappings that follow</td></tr></table><p>This is immediately followed by &lsquo;numUVSMappings&rsquo; UVS Mappings.</p><table class="gray"><caption>UVS Mapping</caption><tr><th style="width: 25%;">Type</th><th style="width: 25%;">Name</th><th style="width: 50%;">Description</th></tr><tr><td> UINT24</td><td> unicodeValue</td><td> Base Unicode value of the UVS</td></tr><tr><td> USHORT</td><td> glyphID</td><td> Glyph ID of the UVS</td></tr></table><p>The UVS Mappings are sorted in increasing order of &lsquo;unicodeValue&rsquo;. No two mappings in this table may have the same &lsquo;unicodeValue&rsquo; values.</p><h2>Example</h2><p>Here is an example of how a format 14 cmap subtable may be used in a font that is aware of JIS-2004 variant glyphs. The CIDs (character IDs) in this example refer to those in the Adobe Character Collection &ldquo;Adobe-Japan1&rdquo;, and may be assumed to be identical to the glyph IDs in the font in our example.</p><p>JIS-2004 changed the default glyph variants for some of its code points. For example:</p><p>JIS-90: U+82A6 &rArr; CID 1142 <br>JIS-2004: U+82A6 &rArr; CID 7961</p><p>Both of these glyph variants are supported through the use of UVSes, as the following examples from Unicode&rsquo;s UVS registry show:</p><p>U+82A6 U+E0100 &rArr; CID 1142 <br>U+82A6 U+E0101 &rArr; CID 7961</p><p>If the font wants to support the JIS-2004 variants by default, it will:</p><ul><li>encode glyph ID 7961 at U+82A6 in the Unicode cmap subtable,</li><li>specify &lt;U+82A6, U+E0101&gt; in the UVS cmap subtable&rsquo;s Default UVS Table (&lsquo;varSelector&rsquo; will be 0x0E0101 and &lsquo;defaultUVSOffset&rsquo; will point to data containing a 0x0082A6 Unicode value)</li><li>specify &lt;U+82A6, U+E0100&gt; &rArr; glyph ID 1142 in the UVS cmap subtable&rsquo;s Non-Default UVS Table (&lsquo;varSelector&rsquo; will be 0x0E0100 and &lsquo;nonDefaultBaseUVOffset&rsquo; will point to data containing a &lsquo;unicodeValue&rsquo; 0x0082A6 and &lsquo;glyphID&rsquo; 1142).</li></ul><p>If, however, the font wants to support the JIS-90 variants by default, it will:</p><ul><li>encode glyph ID 1142 at U+82A6 in the Unicode cmap subtable,</li><li>specify &lt;U+82A6, U+E0100&gt; in the UVS cmap subtable&rsquo;s Default UVS Table</li><li>specify &lt;U+82A6, U+E0101&gt; &rArr; glyph ID 7961 in the UVS cmap subtable&rsquo;s Non-Default UVS Table</li></ul><hr class="separator"><p class="fineprint">This page was last updated 20 November 2008.</p><p class="fineprint">&copy; 2008 Microsoft Corporation. All rights reserved. <a href="http://www.microsoft.com/Misc/cpyright.htm">Terms of use</a>.</p><p class="fineprint">Comments to the MST group: <a href="/typography/AboutMST.mspx">how to contact us</a>.</p></div>
    <div class="middlerule">
    </div>
    <p class="menu">
      <a href="http://www.microsoft.com/typography/default.mspx">Microsoft Typography</a> | <a href="http://www.microsoft.com/typography/creators.htm">Developer...</a> | <a href="default.htm">OpenType specification</a> | <a href="otff.htm#otttables">OpenType tables</a> | The cmap table</p>
    <div class="bottomrule">
    </div>
  </body>
</html>
