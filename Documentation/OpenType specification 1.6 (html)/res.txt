features_ko.htm:            <p><i>Recommended implementation:</i> This feature may be implemented as a MarkToBase Attachment lookup (GPOS LookupType = 4) or a MarkToLigature Attachment lookup (GPOS LookupType = 5).</p><p><i>Application interface: </i>For GIDs found in the <b>mark</b> coverage table, the application gets back the positioning or position adjustment values for the mark glyph. <i>Script/language sensitivity: </i> None.</p><p><i>Feature interaction: </i>None.</p><h2><a name="med2"></a>Tag:  &ldquo;med2&rdquo;</h2><p><i>Friendly name: </i> Medial Form #3</p><p><i>Registered by: </i> Microsoft</p><p><i>Function: </i> Replaces Alaph glyphs in the middle of Syriac words when the preceding base character cannot be joined to.</p><p><i>Example: </i>When an Alaph is preceded by a Waw, the Alaph would be replaced by an appropriate form. <br> This feature is used only for the Syriac script alaph character.</p><p><i>Recommended implementation: </i>The <b>med2</b> table maps default alphabetic forms to corresponding medial forms (GSUB lookup type 5).</p><p><i>Application interface: </i> The application is responsible for noting word boundaries. For GIDs in the middle of words and found in the med2 coverage table, the application passes a GID to the feature and gets back a new GID.</p><p><i>UI suggestion: </i> This feature should be on by default.</p><p><i>Script/language sensitivity: </i> Used only with the Syriac script.</p><p><i>Feature interaction: </i> This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also init and fina.</p><h2><a name="medi" id="medi"></a>Tag: 'medi'</h2><p><i>Friendly name: </i>Medial Forms</p><p><i>Registered by: </i>Microsoft/Adobe</p><p><i>Function: </i>Replaces glyphs in the middles of words (i.e. following a beginning and preceding an end) with alternate forms designed for this use. Note: This is different from the default form, which is designed for stand-alone use. This is common in Latin connecting scripts, and required in various non-Latins like Arabic.</p><p><i>Example: </i>In the typeface Caflisch Script, the y and p in the word 'type' are replaced by the y.med and p.med forms.</p><p><i>Recommended implementation: </i>The medi table maps default alphabetic forms to corresponding medial forms (GSUB lookup type 1).</p><p><i>Application interface: </i>The application is responsible for noting word boundaries. For GIDs in the middles of words and found in the medi coverage table, the application passes a GID to the feature and gets back a new GID.</p><p><i>UI suggestion: </i>This feature should be active by default.</p><p><i>Script/language sensitivity: </i>Can be used in any alphabetic script.</p><p><i>Feature interaction: </i>This feature may be used in combination with other substitution (GSUB) features, whose results it may override. See also <a href="features_fj.htm#init"> init</a> and <a href="features_fj.htm#fina">fina</a>.</p><h2><a name="mgrk" id="mgrk"></a>Tag: 'mgrk'</h2><p><i>Friendly name: </i>Mathematical Greek</p><p><i>Registered by: </i>Adobe</p><p><i>Function: </i>Replaces standard typographic forms of Greek glyphs with corresponding forms commonly used in mathematical notation (which are a subset of the Greek alphabet).</p><p><i>Example: </i>The user applies this feature to U+03A3 (Sigma), and gets U+2211 (summation).</p><p><i>Recommended implementation: </i>The mgrk table maps Greek glyphs to the corresponding forms used for mathematics (GSUB lookup type 1).</p><p><i>Application interface: </i>For GIDs found in the mgrk coverage table, the application passes a GID to the feature table and gets back a new GID. Note: This is a change of semantic value. Besides the original character codes, the application should store the code for the new character.</p><p><i>UI suggestion: </i>This feature should be off by default in most applications. Math-oriented applications may want to activate this feature by default.</p><p><i>Script/language sensitivity: </i>Could apply to any font which includes coverage for the Greek script.</p><p><i>Feature interaction: </i>This feature may be used in combination with other substitution (GSUB) features, whose results it may override.</p><h2><a name="mkmk"></a>Tag:  &ldquo;mkmk&rdquo;</h2><p><i>Friendly name: </i> Mark to Mark Positioning</p><p><i>Registered by: </i> Microsoft</p><p><i>Function: </i> Positions marks with respect to other marks. Required in various non-Latin scripts like Arabic.</p><p><i>Example: </i> In Arabic, the ligaturised mark Ha with Hamza above it; can also be obtained by positioning these marks relative to one another.</p><p><i>Recommended implementation: </i> This feature may be implemented as a MarkToMark Attachment lookup (GPOS lookup type 6).</p><p><i>Application interface: </i> The application gets back positioning values or positional adjustments for marks.</p><p><i>UI suggestion: </i>This feature should be active by default.</p><p><i>Script/language sensitivity: </i> None.</p><p><i>Feature interaction: </i> None.</p><h2><a name="mset" id="mset"></a>Tag: 'mset'</h2><p><i>Registered by: </i>Microsoft</p><p><i>Function: </i>Positions Arabic combining marks in fonts for Windows 95 using glyph substitution</p><p><i>Example: </i>In Arabic, the Hamza is positioned differently when placed above a Yeh Barree as compared to the Alef.</p><p><i>Windows 95 implementation: </i>In contrast to the &ldquo;mark&rdquo; feature, &ldquo;mset&rdquo; uses glyph substitution to combine marks and base glyphs. It replaces a default mark glyph with a correctly positioned mark glyph. The font designer specifies the position of the mark when describing the mark's contour in the font file. Microsoft's Arabic fonts, created for Windows 95, use a contextual substitution lookup (GSUB LookupType = 5) to implement the &ldquo;mset&rdquo; feature.</p><h2><a name="nalt" id="nalt"></a>Tag: 'nalt'</h2><p><i>Friendly name: </i>Alternate Annotation Forms</p><p><i>Registered by: </i>Adobe</p><p><i>Function: </i>Replaces default glyphs with various notational forms (e.g. glyphs placed in open or solid circles, squares, parentheses, diamonds or rounded boxes). In some cases an annotation form may already be present, but the user may want a different one.</p><p><i>Example: </i>The user invokes this feature to get U+3200 (the circled form of 'ga') from U+3131 (hangul 'ga').</p><p><i>Recommended implementation: </i>The nalt table maps GIDs for various standard forms to one or more corresponding annotation forms. While many of these substitutions are one-to-one (GSUB lookup type 1), others require a selection from a set (GSUB lookup type 3). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. If more than one form is present, the set of forms for each character should be ordered consistently - both within the font and across the family.</p><p><i>Application interface: </i>For GIDs found in the nalt coverage table, the application passes a GID and gets back a set of new GIDs, then stores the one selected by the user.</p><p><i>UI suggestion: </i>This feature should be inactive by default. The application must provide a means for the user to select the desired form from the set returned by the table. It can note the position of the selected form in a set of alternates, and offer the glyph at that position as the default selection the next time this feature is invoked. In the absence of such prior information, the application may assume that the first glyph in a set is the preferred form, so the font developer should order them accordingly.</p><p><i>Script/language sensitivity: </i>Used mostly in CJKV fonts, but can apply to European scripts.</p><p><i>Feature interaction: </i>This feature is mutually exclusive with all other features, which should be turned off when it's applied, except the <a href="features_uz.htm#vert">vert</a> and <a href="features_uz.htm#vrt2">vrt2</a> features, which may be used in addition.</p><h2><a name="nlck"></a>Tag:  &ldquo;nlck&rdquo;</h2><p><i>Friendly name: </i> NLC Kanji Forms</p><p><i>Registered by: </i> Adobe Systems Inc.</p><p><i>Function: </i> The National Language Council (NLC) of Japan has defined new glyph shapes for a number of JIS characters in 2000. The <a href="features_ko.htm#nlck">'nlck'</a> feature is used to access those glyphs.</p><p><i>Example: </i> The glyph <img src="nlc1.gif" alt=""> is replaced by the glyph <img src="nlc2.gif" alt=""> .</p><p><i>Recommended implementation:</i> One-for-one substitution of non-NLC glyphs by the corresponding NLC glyph.</p><p><i>UI suggestion: </i> This feature should be off by default.</p><p><i>Script/language sensitivity: </i> Used only with Kanji script.</p><p><i>Feature interaction: </i> This feature is exclusive with the 'jp78', 'jp83', 'jp90' and similar features. It can be combined with the 'palt', 'vpal', 'vert' and 'vrt2' features.</p><h2><a name="nukt"></a>Tag:  &ldquo;nukt&rdquo;</h2><p><i>Friendly name: </i> Nukta Forms</p><p><i>Registered by: </i> Microsoft</p><p><i>Function: </i> Produces Nukta forms in Indic scripts.</p><p><i>Example: </i> In Hindi (Devanagari script), a consonant when combined with a nukta gives its nukta form.</p><p><i>Recommended implementation: </i>The <b>nukt</b> table maps the sequence of a consonant followed by a nukta to the consonant's nukta form (GSUB lookup type 4).</p><p><i>Application interface: </i> The application passes the sequence of GIDs (consonant and nukta), to the table, and gets back the GID for the nukta form.</p><p><i>UI suggestion: </i>In recommended usage, this feature triggers substitutions that are required for correct display of the given script. It should be applied in the appropriate contexts, as determined by script-specific processing. Control of the feature should not generally be exposed to the user.</p><p><i>Script/language sensitivity: </i> Required in Indic scripts.</p><p><i>Feature interaction: </i>This feature is used in conjunction with certain other features to derive required forms of Indic scripts. The application is expected to process this feature and certain other features in an appropriate order to obtain the correct set of basic forms: <a href="features_ko.htm#nukt">nukt</a>, <a href="features_ae.htm#akhn">akhn</a>, <a href="features_pt.htm#rphf">rphf</a>, <a href="features_pt.htm#rkrf">rkrf</a>, <a href="features_pt.htm#pref">pref</a>, <a href="features_ae.htm#blwf">blwf</a>, <a href="features_fj.htm#half">half</a>, <a href="features_pt.htm#pstf">pstf</a>, <a href="features_ae.htm#cjct">cjct</a>. Other discretionary features for optional typographic effects may also be applied. Lookups for such discretionary features should be processed after lookups for this feature have been processed.</p><h2><a name="numr" id="numr"></a>Tag: 'numr'</h2><p><i>Friendly name: </i>Numerators</p><p><i>Registered by: </i>Adobe</p><p><i>Function: </i>Replaces selected figures which precede a slash with numerator figures, and replaces the typographic slash with the fraction slash.</p><p><i>Example: </i>In the string 11/17 selected by the user, the application turns the 11 into numerators, and the slash into a fraction slash when the user applies the fraction feature (<a href="features_fj.htm#frac">frac</a>).</p><p><i>Recommended implementation: </i>The numr table maps sets of figures and related characters to corresponding numerator glyphs in the font. It also maps the typographic slash (U+002F) to the fraction slash (U+2044). All mappings are one-to-one (GSUB lookup type 1).</p><p><i>Application interface: </i>For GIDs found in the numr coverage table, the application passes a GID to the table and gets back a new GID.</p><p><i>UI suggestion: </i>This feature should normally be called by an application when the user applies the <a href="features_fj.htm#frac">frac</a> feature.</p><p><i>Script/language sensitivity: </i>None.</p><p><i>Feature interaction: </i>This feature supports <a href="features_fj.htm#frac">frac</a>. It may be used in combination with other substitution (GSUB) features, whose results it may override.</p><h2><a name="onum" id="onum"></a>Tag: 'onum'</h2><p><i>Friendly name: </i>Oldstyle Figures</p><p><i>Registered by: </i>Microsoft/Adobe</p><p><i>Function: </i>This feature changes selected figures from the default lining style to oldstyle form.</p><p><i>Example: </i>The user invokes this feature to get oldstyle figures, which fit better into the flow of normal upper- and lowercase text. Various characters designed to be used with figures may also have oldstyle versions.</p><p><i>Recommended implementation: </i>The onum table maps each lining figure, and any associated characters, to the corresponding oldstyle form (GSUB lookup type 1).</p><p><i>Application interface: </i>For GIDs found in the onum coverage table, the application passes a GID to the onum table and gets back a new GID.</p><p><i>UI suggestion: </i>Users can switch between the lining and oldstyle sets by turning this feature on or off. Note: This feature is separate from the figure-width features <a href="features_pt.htm#pnum">pnum</a> and <a href="features_pt.htm#tnum">tnum</a>. When the user changes figure style, the application may want to query whether a change in width is also desired.</p><p><i>Script/language sensitivity: </i>None.</p><p><i>Feature interaction: </i>This feature overrides the results of the Lining Figures feature (<a href="#lnum">lnum</a>).</p><h2><a name="opbd" id="opbd"></a>Tag: 'opbd'</h2><p><i>Friendly name: </i>Optical Bounds</p><p><i>Registered by: </i>Adobe (Modified by Adobe, this is the newer description)</p><p><i>Function: </i>Aligns glyphs by their apparent left or right extents in horizontal setting, or apparent top or bottom extents in vertical setting, replacing the default behavior of aligning glyphs by their origins. Another name for this behavior would be visual justification. The optical edge of a given glyph is only indirectly related to its advance width or bounding box; this feature provides a means for getting true visual alignment.</p><p><i>Example: </i>Succeeding lines beginning with T, D and W would shift to the left by varying amounts when the text is left-justified and this feature is applied. Succeeding lines ending with r, h and y would likewise shift to the right by differing degrees when the text is right-justified and this feature is applied.</p><p><i>Recommended implementation: </i>Values for affected glyphs are defined with a separate record for left, right, top, and bottom. Each record describes the amount by which the placement and advance width should be altered (GPOS lookup type 1).</p><p><i>Application interface: </i>For GIDs found in the opbd coverage table, the application calls one of two related tables, depending on the position of the glyph. For glyphs at the left end of a horizontal line, it calls the <a href="#lfbd"> lfbd</a> table, for glyphs at the right end of a horizontal line, it calls the <a href="features_pt.htm#rtbd"> rtbd</a> table.</p><p><i>UI suggestion: </i>This feature should be active by default. It effectively changes the line length, so justification algorithms should account for this adjustment.</p><p><i>Script/language sensitivity: </i>None.</p><p><i>Feature interaction: </i>Should not be applied to glyphs which use fixed-width features (e.g. <a href="features_fj.htm#fwid">fwid</a>, <a href="features_fj.htm#halt">halt</a>, <a href="features_fj.htm#hwid">hwid</a>, <a href="features_pt.htm#qwid">qwid</a> and <a href="features_pt.htm#twid">twid</a>) or vertical features (e.g. <a href="features_uz.htm#vert">vert</a>, <a href="features_uz.htm#vrt2">vrt2</a>, <a href="features_uz.htm#vpal">vpal</a>, <a href="features_uz.htm#valt">valt</a> and <a href="/typography/features_uz.htm#vhal">vhal</a>). Uses <a href="#lfbd"> lfbd</a> and <a href="features_pt.htm#rtbd">rtbd</a> features.</p><h2><a name="ordn" id="ordn"></a>Tag: 'ordn'</h2><p><i>Friendly name: </i>Ordinals</p><p><i>Registered by: </i>Adobe</p><p><i>Function: </i>Replaces default alphabetic glyphs with the corresponding ordinal forms for use after figures. One exception to the follows-a-figure rule is the numero character (U+2116), which is actually a ligature substitution, but is best accessed through this feature.</p><p><i>Example: </i>The user applies this feature to turn 2.o into 2.<sup>o</sup> (abbreviation for secundo).</p><p><i>Recommended implementation: </i>The ordn table maps various lowercase letters to corresponding ordinal forms in a chained context (GSUB lookup type 6), and the sequence No to the numero character (GSUB lookup type 4).</p><p><i>Application interface: </i>For sets of GIDs found in the clig coverage table, the application passes the sequence of GIDs to the table and gets back new GIDs. Note that full sequences must be passed. Note: This may be a change of semantic value. Besides the original character codes, the application should store the code for the new character.</p><p><i>UI suggestion: </i>This feature should be off by default.</p><p><i>Script/language sensitivity: </i>Applies mostly to Latin script.</p><p><i>Feature interaction: </i>This feature may be used in combination with other substitution (GSUB) features, whose results it may override.</p><h2><a name="ornm" id="ornm"></a>Tag: 'ornm'</h2><p><i>Friendly name: </i>Ornaments</p><p><i>Registered by: </i>Adobe</p><p><i>Function: </i>This is a dual-function feature, which uses two input methods to give the user access to ornament glyphs (e.g. fleurons, dingbats and border elements) in the font. One method replaces the bullet character with a selection from the full set of available ornaments; the other replaces specific &ldquo;lower ASCII&rdquo; characters with ornaments assigned to them. The first approach supports the general or browsing user; the second supports the power user.</p><p><i>Example: </i>The user inputs qwwwwwwwwwe to form the top of a flourished box in Adobe Caslon, or inputs the bullet character, then chooses the thistle dingbat.</p><p><i>Recommended implementation: </i>The ornm table maps all ornaments in a font to the bullet character (GSUB lookup type 3) and each ornament in a font to a corresponding alphanumeric character (GUSB lookup type 1). The manufacturer may choose to build two tables (one for each lookup type) or only one which uses lookup type 3 for all substitutions. As in any one-from-many substitution, alternates present in more than one face should be ordered consistently across a family, so that those alternates can work correctly when switching between family members.</p><p><i>Application interface: </i>When this feature is invoked, the application must note whether the selected text is the bullet character (U+2022) or alphanumeric characters. In the first case, it passes the GID for bullet to the ornm table and gets back a set of GIDs, and gives the user a means to select from among them. In the second case, for GIDs found in the ornm coverage table, it passes GIDs to the ornm table and gets back new GIDs.</p><p><i>UI suggestion: </i>This feature should be inactive by default. When more than one GID is returned (the bullet case), an application could display the forms sequentially in context, or present a palette showing all the forms at once, or give the user a choice between these approaches. Once the user has selected a specific ornament, that one should be the default selection the next time the bullet is typed. In the absence of such prior information, the application may assume that the first ornament in a set is the preferred form, so the font developer should order them accordingly.</p><p><i>Script/language sensitivity: </i>None.</p><p><i>Feature interaction: </i>This feature is mutually exclusive with all other substitution (GSUB) features, which should be turned off when it's applied.</p><hr class="separator"><p class="fineprint">This page was last updated 22 August 2008.</p><p class="fineprint">&copy; 2008 Microsoft Corporation. All rights reserved. <a href="/info/cpyright.htm">Terms of use</a>.</p><p class="fineprint">Comments to the MST group: <a href="/typography/AboutMST.mspx">how to contact us</a></p></div>
gpos.htm:      <p>There is just one exception: the &ldquo;next&rdquo; glyph in a sequence may be one of those that formed a context for the operation just performed. For example, in the case of pair positioning operations (i.e., kerning), if the position value record for the second glyph is null, that glyph is treated as the &ldquo;next&rdquo; glyph in the sequence.</p>
name.htm:          <td>Full font name; this should be a combination of strings 1 and 2. Exception: if the font is &ldquo;Regular&rdquo; as indicated in string 2, then use only the family name contained in string 1. <br> An exception to the above definition of Full font name is for Windows platform strings for CFF OpenType fonts: in this case, the Full font name string must be identical to the PostScript FontName in the CFF Name INDEX.</td>
name.htm:          <td>PostScript CID findfont name; Its presence in a font means that the nameID 6 holds a PostScript font name that is meant to be used with the &ldquo;composefont&rdquo; invocation in order to invoke the font in a PostScript interpreter. See the definition of name ID 6.<br><br>The value held in the name ID 20 string is interpreted as a PostScript font name that is meant to be used with the &ldquo;findfont&rdquo; invocation, in order to invoke the font in a PostScript interpreter.<br><br>If the name ID 20 is present in a font, there must be one name ID 20 record for every Macintosh platform cmap subtable in that font. A particular name ID 20 record is associated with the encoding specified by the matching cmap subtable. A name ID 20 record is matched to a cmap subtable when they have the same platform and platform-specific encoding IDs, and corresponding language/version IDs. Name ID 20 records are meant to be used only with Macintosh cmap subtables. The version field for a cmap subtable is one more than the language ID value for the corresponding name ID 20 record, with the exception of the cmap subtable version field 0. This version field, meaning &ldquo;not language-specific&rdquo;, corresponds to the language ID value 0xFFFF, or decimal 65535, for the corresponding name ID 20 record.<br><br>When translated to ASCII, this name string must be restricted to the printable ASCII subset, codes 33 through 126, except for the 10 characters: '[', ']', '(', ')', '{', '}', '&lt;', '&gt;', '/', '%'.<br><br>Note that this specification applies only to data fork OpenType fonts. Macintosh resource-fork TrueType and other Macintosh sfnt-wrapped fonts supply the PostScript font name to be used with the &ldquo;findfont&rdquo; invocation, in order to invoke the font in a PostScript interpreter, in the FOND resource style-mapping table.<br><br>Note that a particular Name ID 20 string always corresponds to a particular Macintosh cmap subtable. However, some host OpenType/TTF fonts also contain a post table, format 4, which provides a mapping from glyph ID to encoding value, and also corresponds to a particular Macintosh cmap subtable. Unfortunately, the post table format 4 contains no provision for identifying which Macintosh cmap subtable it matches, nor for providing more than one mapping. Host fonts which contain a post table format 4, should also contain only a single Macintosh cmap subtable, and a single Name ID 20 string. In the case where there is more than one Macintosh cmap subtable and more than one Name ID 20 string, there is no definition of which one matches the post table format 4.</td>
otff.htm:      <p>The only exception to this is the Offset Table's sfnt version. This serves solely to identify whether the OpenType font contains TrueType outlines (a value of 1.0) or CFF data (the tag 'OTTO'), as described in the section below, 'Organization of an OpenType font.'</p>
recom.htm:        <li>Characters U+0001-001F (misc ASCII control codes) and U+007F (delete) should be mapped to glyph 0 (with some exceptions noted below).</li>
ttch01.htm:      <p>More concretely, the interpreter processes a stream or sequence of instructions. Typically these instructions take their arguments from the interpreter stack and place their results on that stack. The only exceptions are a small number of instructions that are used to push data onto the interpreter stack. These instructions take their arguments from the instruction stream.</p>
